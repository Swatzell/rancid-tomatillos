{"ast":null,"code":"var _jsxFileName = \"/Users/lydiasims/2401/Mod3/Projects/rancid-tomatillos/src/Component/App/App.js\",\n  _s = $RefreshSig$();\nimport { Route, Routes, useNavigate } from 'react-router-dom';\nimport MainPage from './MainPage';\nimport SelectedMovie from './SelectedMovie';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [error, setError] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchMovies();\n  }, []);\n  const fetchMovies = async () => {\n    try {\n      const response = await fetch('https://rancid-tomatillos.herokuapp.com/api/v2/movies');\n      if (!response.ok) {\n        throw new Error('Failed to fetch movies');\n      }\n      const data = await response.json();\n      setMovies(data.movies);\n    } catch (error) {\n      setError(true);\n    }\n  };\n  const handleMovieSelection = async id => {\n    try {\n      const response = await fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/movies/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch movie details');\n      }\n      const data = await response.json();\n      setSelectedMovie(data.movie);\n      navigate(`/movies/${id}`);\n    } catch (error) {\n      setError(true);\n    }\n  };\n  const handleBackToSelection = () => {\n    setSelectedMovie(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Rancid Tomatillos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error: Failed to fetch data. Please try again later.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(MainPage, {\n          movies: movies,\n          handleMovieSelection: handleMovieSelection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/movies/:movieID\",\n        element: /*#__PURE__*/_jsxDEV(SelectedMovie, {\n          movie: selectedMovie,\n          onBack: handleBackToSelection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dvlRXf0AYFTq8QucVC+PCvW/qZY=\", false, function () {\n  return [useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Route","Routes","useNavigate","MainPage","SelectedMovie","useEffect","useState","jsxDEV","_jsxDEV","App","_s","movies","setMovies","selectedMovie","setSelectedMovie","error","setError","navigate","fetchMovies","response","fetch","ok","Error","data","json","handleMovieSelection","id","movie","handleBackToSelection","className","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","onBack","_c","$RefreshReg$"],"sources":["/Users/lydiasims/2401/Mod3/Projects/rancid-tomatillos/src/Component/App/App.js"],"sourcesContent":["import { Route, Routes, useNavigate } from 'react-router-dom';\nimport MainPage from './MainPage';\nimport SelectedMovie from './SelectedMovie';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(null);\n  const [error, setError] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchMovies();\n  }, []);\n\n  const fetchMovies = async () => {\n    try {\n      const response = await fetch('https://rancid-tomatillos.herokuapp.com/api/v2/movies');\n      if (!response.ok) {\n        throw new Error('Failed to fetch movies');\n      }\n      const data = await response.json();\n      setMovies(data.movies);\n    } catch (error) {\n      setError(true);\n    }\n  };\n\n  const handleMovieSelection = async (id) => {\n    try {\n      const response = await fetch(`https://rancid-tomatillos.herokuapp.com/api/v2/movies/${id}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch movie details');\n      }\n      const data = await response.json();\n      setSelectedMovie(data.movie);\n      navigate(`/movies/${id}`);\n    } catch (error) {\n      setError(true);\n    }\n  };\n\n  const handleBackToSelection = () => {\n    setSelectedMovie(null);\n  };\n\n  return (\n    <main className=\"App\">\n      <h1>Rancid Tomatillos</h1>\n      {error && <div>Error: Failed to fetch data. Please try again later.</div>}\n      <Routes>\n        <Route path=\"/\" element={<MainPage movies={movies} handleMovieSelection={handleMovieSelection} />} />\n        <Route path=\"/movies/:movieID\" element={<SelectedMovie movie={selectedMovie} onBack={handleBackToSelection} />} />\n      </Routes>\n    </main>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}